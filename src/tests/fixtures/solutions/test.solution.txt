export type Value = 1 | 2 | 3;
export type Value2 = "1" | true | 0.2;
export type Value3 = Value | false;
export type Value4 = "some";
export type Value5 = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10);
export type Value6 = {
    firstName: string;
    lastName: string;
};
export type Value7 = [
    string,
    Value6
];
export type Authors = {
    id: number;
    name: string;
    email: string;
};
export type Post = {
    postId: string;
    name: string;
    content: string;
    author: string;
};
export type AuthorsAddArgs = Omit<Authors, "id">;
export type PostsAddArgs = Post;
export type AuthorsGetArgs = number | {
    id: number;
} | {
    name: string;
} | {
    email: string;
};
export type PostsGetArgs = string | {
    postId: string;
};
const isAuthorsIdIndex = (arg: AuthorsGetArgs): arg is {
    id: number;
} => {
    return typeof arg === "object" && Reflect.has(arg, "id");
};
const isAuthorsNameIndex = (arg: AuthorsGetArgs): arg is {
    name: string;
} => {
    return typeof arg === "object" && Reflect.has(arg, "name");
};
const isAuthorsEmailIndex = (arg: AuthorsGetArgs): arg is {
    email: string;
} => {
    return typeof arg === "object" && Reflect.has(arg, "email");
};
const isPostsPostIdIndex = (arg: PostsGetArgs): arg is {
    postId: string;
} => {
    return typeof arg === "object" && Reflect.has(arg, "postId");
};
export type MyDatabaseClient = {
    authors: {
        add: (arg: Omit<Authors, "id">) => Promise<number>;
        get: (arg: AuthorsGetArgs) => Promise<Authors>;
        getAll: (arg: AuthorsGetArgs) => Promise<ReadonlyArray<Authors>>;
    };
    posts: {
        add: (arg: Post) => Promise<string>;
        get: (arg: PostsGetArgs) => Promise<Post>;
        getAll: (arg: PostsGetArgs) => Promise<ReadonlyArray<Post>>;
    };
};
function createDatabaseClient(db: IDBDatabase): MyDatabaseClient {
    function authorsGet(arg: AuthorsGetArgs, methodName: "get"): Promise<Authors>;
    function authorsGet(arg: AuthorsGetArgs, methodName: "getAll"): Promise<ReadonlyArray<Authors>>;
    function authorsGet(arg: AuthorsGetArgs, methodName: "get" | "getAll"): Promise<Authors | ReadonlyArray<Authors>> {
        return new Promise((resolve, reject) => {
            const tx = db.transaction(["Authors"], "readonly");
            const store = tx.objectStore("Authors");
            let getRequest: IDBRequest | null = null;
            if (isAuthorsIdIndex(arg)) {
                getRequest = store[methodName](arg.id);
            }
            else if (isAuthorsNameIndex(arg)) {
                const index: IDBIndex = store.index("name");
                getRequest = index[methodName](arg.name);
            }
            else if (isAuthorsEmailIndex(arg)) {
                const index: IDBIndex = store.index("email");
                getRequest = index[methodName](arg.email);
            }
            else {
                getRequest = store[methodName](arg);
            }
            if (getRequest != null) {
                getRequest.onerror = event => {
                    reject((getRequest as IDBRequest).error);
                };
                getRequest.onsuccess = event => {
                    resolve((getRequest as IDBRequest).result);
                };
            }
            else {
                reject(new Error("No available index for given query"));
            }
        });
    }
    function postsGet(arg: PostsGetArgs, methodName: "get"): Promise<Post>;
    function postsGet(arg: PostsGetArgs, methodName: "getAll"): Promise<ReadonlyArray<Post>>;
    function postsGet(arg: PostsGetArgs, methodName: "get" | "getAll"): Promise<Post | ReadonlyArray<Post>> {
        return new Promise((resolve, reject) => {
            const tx = db.transaction(["Posts"], "readonly");
            const store = tx.objectStore("Posts");
            let getRequest: IDBRequest | null = null;
            if (isPostsPostIdIndex(arg)) {
                getRequest = store[methodName](arg.postId);
            }
            else {
                getRequest = store[methodName](arg);
            }
            if (getRequest != null) {
                getRequest.onerror = event => {
                    reject((getRequest as IDBRequest).error);
                };
                getRequest.onsuccess = event => {
                    resolve((getRequest as IDBRequest).result);
                };
            }
            else {
                reject(new Error("No available index for given query"));
            }
        });
    }
    return {
        authors: {
            add: (arg: AuthorsAddArgs): Promise<number> => {
                return new Promise((resolve, reject) => {
                    const tx = db.transaction(["Authors"], "readwrite");
                    const store = tx.objectStore("Authors");
                    const addRequest: IDBRequest = store.add(arg);
                    addRequest.onerror = event => {
                        reject((addRequest as IDBRequest<number>).error);
                    };
                    addRequest.onsuccess = event => {
                        resolve((addRequest as IDBRequest<number>).result);
                    };
                });
            },
            get: (arg: AuthorsGetArgs): Promise<Authors> => {
                return authorsGet(arg, "get");
            },
            getAll: (arg: AuthorsGetArgs): Promise<ReadonlyArray<Authors>> => {
                return authorsGet(arg, "getAll");
            }
        },
        posts: {
            add: (arg: PostsAddArgs): Promise<string> => {
                return new Promise((resolve, reject) => {
                    const tx = db.transaction(["Posts"], "readwrite");
                    const store = tx.objectStore("Posts");
                    const addRequest: IDBRequest = store.add(arg);
                    addRequest.onerror = event => {
                        reject((addRequest as IDBRequest<string>).error);
                    };
                    addRequest.onsuccess = event => {
                        resolve((addRequest as IDBRequest<string>).result);
                    };
                });
            },
            get: (arg: PostsGetArgs): Promise<Post> => {
                return postsGet(arg, "get");
            },
            getAll: (arg: PostsGetArgs): Promise<ReadonlyArray<Post>> => {
                return postsGet(arg, "getAll");
            }
        }
    };
}
export function init(): Promise<MyDatabaseClient> {
    return new Promise((resolve, reject) => {
        const DBOpenRequest = globalThis.indexedDB.open("MyDatabase");
        DBOpenRequest.onerror = event => {
            reject("Error opening database: MyDatabase");
        };
        DBOpenRequest.onsuccess = event => {
            const db = DBOpenRequest.result;
            resolve(createDatabaseClient(db));
        };
        DBOpenRequest.onupgradeneeded = event => {
            const db = DBOpenRequest.result;
            const AuthorsStore = db.createObjectStore("Authors", { keyPath: "id", autoIncrement: true });
            db.createObjectStore("Posts", { keyPath: "postId" });
            AuthorsStore.createIndex("name", "name", { unique: false });
            AuthorsStore.createIndex("email", "email", { unique: true });
        };
    });
}
