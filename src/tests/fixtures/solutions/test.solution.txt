export type Value = 1 | 2 | 3;
export type Value2 = "1" | true | 0.2;
export type Value3 = Value | false;
export type Value4 = "some";
type AuthorsGetArgs = string | {
    name: string;
} | {
    email: string;
};
type PostsGetArgs = {
    name: string;
};
export type MyDatabaseClient = {
    authors: {
        add: (arg: Authors) => Promise<void>;
    };
    posts: {
        add: (arg: Post) => Promise<void>;
    };
};
function createDatabaseClient(db: IDBDatabase): MyDatabaseClient {
    return {
        authors: {
            add: (arg: Authors): Promise<void> => {
                const tx = db.transaction(["Authors"], "readwrite");
                const store = tx.objectStore("Authors");
                const addRequest: IDBRequest = store.add(arg);
                addRequest.onerror = event => {
                    reject(event);
                };
                addRequest.onsuccess = event => {
                    resolve();
                };
            }
        },
        posts: {
            add: (arg: Post): Promise<void> => {
                const tx = db.transaction(["Posts"], "readwrite");
                const store = tx.objectStore("Posts");
                const addRequest: IDBRequest = store.add(arg);
                addRequest.onerror = event => {
                    reject(event);
                };
                addRequest.onsuccess = event => {
                    resolve();
                };
            }
        }
    };
}
export function init(): Promise<MyDatabaseClient> {
    return new Promise((resolve, reject) => {
        const DBOpenRequest = globalThis.open("MyDatabase");
        DBOpenRequest.onerror = event => {
            reject("Error opening database: MyDatabase");
        };
        DBOpenRequest.onsuccess = event => {
            const db = DBOpenRequest.result;
            resolve(createDatabaseClient(db));
        };
        DBOpenRequest.onupgradeneeded = event => {
            const db = DBOpenRequest.result;
            const AuthorsStore = db.createObjectStore("Authors", { keyPath: "id" });
            const PostsStore = db.createObjectStore("Posts", {});
            AuthorsStore.createIndex("name", "name", { unique: false });
            AuthorsStore.createIndex("email", "email", { unique: true });
            PostsStore.createIndex("name", "name", { unique: false });
        };
    });
}
