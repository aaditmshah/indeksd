import * as ts from 'typescript';

export const COMMON_IDENTIFIERS = {
  delete: ts.factory.createIdentifier('delete'),
  open: ts.factory.createIdentifier('open'),
  indexedDB: ts.factory.createIdentifier('indexedDB'),
  sortBy: ts.factory.createIdentifier('sortBy'),
  objectStore: ts.factory.createIdentifier('objectStore'),
  objectStoreNames: ts.factory.createIdentifier('objectStoreNames'),
  contains: ts.factory.createIdentifier('contains'),
  storeName: ts.factory.createIdentifier('storeName'),
  keyPath: ts.factory.createIdentifier('keyPath'),
  createObjectStore: ts.factory.createIdentifier('createObjectStore'),
  createIndex: ts.factory.createIdentifier('createIndex'),
  never: ts.factory.createIdentifier('never'),
  query: ts.factory.createIdentifier('query'),
  indexName: ts.factory.createIdentifier('indexName'),
  indexNames: ts.factory.createIdentifier('indexNames'),
  target: ts.factory.createIdentifier('target'),
  range: ts.factory.createIdentifier('range'),
  executeQuery: ts.factory.createIdentifier('executeQuery'),
  where: ts.factory.createIdentifier('where'),
  all: ts.factory.createIdentifier('all'),
  arg: ts.factory.createIdentifier('arg'),
  add: ts.factory.createIdentifier('add'),
  error: ts.factory.createIdentifier('error'),
  get: ts.factory.createIdentifier('get'),
  getAll: ts.factory.createIdentifier('getAll'),
  put: ts.factory.createIdentifier('put'),
  init: ts.factory.createIdentifier('init'),
  index: ts.factory.createIdentifier('index'),
  store: ts.factory.createIdentifier('store'),
  db: ts.factory.createIdentifier('db'),
  from: ts.factory.createIdentifier('from'),
  to: ts.factory.createIdentifier('to'),
  then: ts.factory.createIdentifier('then'),
  mode: ts.factory.createIdentifier('mode'),
  count: ts.factory.createIdentifier('count'),
  globalThis: ts.factory.createIdentifier('globalThis'),
  undefined: ts.factory.createIdentifier('undefined'),
  storeNames: ts.factory.createIdentifier('storeNames'),
  options: ts.factory.createIdentifier('options'),
  onerror: ts.factory.createIdentifier('onerror'),
  onsuccess: ts.factory.createIdentifier('onsuccess'),
  resolve: ts.factory.createIdentifier('resolve'),
  reject: ts.factory.createIdentifier('reject'),
  result: ts.factory.createIdentifier('result'),
  transaction: ts.factory.createIdentifier('transaction'),
  tx: ts.factory.createIdentifier('tx'),
  withJoins: ts.factory.createIdentifier('withJoins'),
  IndexName: ts.factory.createIdentifier('IndexName'),
  RangeQuery: ts.factory.createIdentifier('RangeQuery'),
  ArgType: ts.factory.createIdentifier('ArgType'),
  ReturnType: ts.factory.createIdentifier('ReturnType'),
  WithJoins: ts.factory.createIdentifier('WithJoins'),

  ReadonlyArray: ts.factory.createIdentifier('ReadonlyArray'),
  tablesForTransaction: ts.factory.createIdentifier('tablesForTransaction'),
  createDatabaseClient: ts.factory.createIdentifier('createDatabaseClient'),

  // JavaScript Object References
  Map: ts.factory.createIdentifier('Map'),
  Object: ts.factory.createIdentifier('Object'),
  Promise: ts.factory.createIdentifier('Promise'),
  Reflect: ts.factory.createIdentifier('Reflect'),
  Set: ts.factory.createIdentifier('Set'),
  Array: ts.factory.createIdentifier('Array'),
  Error: ts.factory.createIdentifier('Error'),

  // Standard IndexedDB Interfaces
  IDBKeyRange: ts.factory.createIdentifier('IDBKeyRange'),
  IDBDatabase: ts.factory.createIdentifier('IDBDatabase'),
  IDBRequest: ts.factory.createIdentifier('IDBRequest'),
  IDBTransaction: ts.factory.createIdentifier('IDBTransaction'),
  IDBTransactionMode: ts.factory.createIdentifier('IDBTransactionMode'),
  IDBObjectStore: ts.factory.createIdentifier('IDBObjectStore'),
  IDBIndex: ts.factory.createIdentifier('IDBIndex'),
  IDBObjectStoreParameters: ts.factory.createIdentifier(
    'IDBObjectStoreParameters',
  ),
  IDBIndexParameters: ts.factory.createIdentifier('IDBIndexParameters'),
  DBOpenRequest: ts.factory.createIdentifier('DBOpenRequest'),
  DBAddRequest: ts.factory.createIdentifier('DBAddRequest'),
  DBGetRequest: ts.factory.createIdentifier('DBGetRequest'),
  DBPutRequest: ts.factory.createIdentifier('DBPutRequest'),
  DBDeleteRequest: ts.factory.createIdentifier('DBDeleteRequest'),
};
